{"version":3,"sources":["components/todoElement.js","components/Scrollable.js","App.js","serviceWorker.js","index.js"],"names":["TodoElement","props","useState","chosen","setChosen","type","id","style","marginLeft","marginRight","onClick","event","console","log","name","prevState","className","textDecoration","selfDestruct","Scrollable","key","todoList","setTodoList","value","setValue","handleDestroy","filter","element","onSubmit","preventDefault","nanoid","addTodo","onChange","target","handleChange","map","App","stylesheet","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6JA2BeA,MAzBf,SAAqBC,GAAQ,IAAD,EACIC,oBAAS,GADb,mBACjBC,EADiB,KACTC,EADS,KAUxB,OACI,oCACI,6BACI,2BAAOC,KAAK,WAAWC,GAAG,mBACnBC,MAAO,CAACC,WAAY,MAAOC,YAAa,OACxCC,QAAS,SAACC,GAAD,OAVxBC,QAAQC,IAAIZ,EAAMa,WAClBV,GAAU,SAAAW,GAAS,OAAKA,QAUhB,2BAAOC,UAAU,yCACVT,MAAOJ,EAAS,GAAK,CAACc,eAAgB,iBAAkBhB,EAAMa,MACrE,4BAAQE,UAAU,cAAcN,QAAS,kBAAMT,EAAMiB,aAAajB,EAAMK,MAAxE,Q,cC+BDa,MA/Cf,SAAoBlB,GAAQ,IAAD,EACSC,mBAAS,CACrC,CAACkB,IAAK,EAAGN,KAAM,qBACf,CAACM,IAAK,EAAGN,KAAM,sBAHI,mBAChBO,EADgB,KACNC,EADM,OAKGpB,mBAAS,IALZ,mBAKhBqB,EALgB,KAKTC,EALS,KA0BjBC,EAAgB,SAACnB,GACnBgB,EAAYD,EAASK,QAAO,SAAAC,GAAO,OAAIA,EAAQP,MAAQd,OAI3D,OACI,oCACI,wBAAIC,MAAO,CAACC,WAAY,OAAxB,aACA,0BAAMoB,SAAW,SAAAjB,GAAK,OA3Bd,SAACA,GACbA,EAAMkB,iBACO,IAATN,IACAD,EAAY,GAAD,mBACHD,GADG,CAEH,CACID,IAAKU,cACLhB,KAAMS,MAIlBC,EAAS,KAgBiBO,CAAQpB,KAC9B,4BAAQJ,MAAO,CAACE,YAAa,MAAOD,WAAY,OAAQH,KAAK,UAA7D,OACA,2BAAOW,UAAW,2BAA4BX,KAAK,OAAOkB,MAAOA,EAC1DS,SAAU,SAACrB,GAAD,OAfR,SAACA,GAClBa,EAASb,EAAMsB,OAAOV,OAccW,CAAavB,OAE7C,6BACCU,EAASc,KAAI,SAAAR,GAAO,OAAI,kBAAC,EAAD,CAAaP,IAAKO,EAAQP,IAAKd,GAAIqB,EAAQP,IAAKN,KAAMa,EAAQb,KACjDI,aAAcO,SC9BjDW,MAVf,WACI,OACI,yBAAKpB,UAAU,OACX,4BAAQA,UAAU,aAAaqB,WAAY,WACvC,kBAAC,EAAD,SCGIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3C,QAAQ2C,MAAMA,EAAMC,a","file":"static/js/main.ed9d7f67.chunk.js","sourcesContent":["import React, {useState} from 'react';\n\nfunction TodoElement(props) {\n    const [chosen, setChosen] = useState(true);\n\n\n    const clickHandler = (event) => {\n        console.log(props.name)\n        setChosen(prevState => !prevState)\n    }\n\n\n    return (\n        <>\n            <div>\n                <input type=\"checkbox\" id=\"stacked-remember\"\n                       style={{marginLeft: '5px', marginRight: '5px'}}\n                       onClick={(event) => clickHandler(event)}/>\n                <label className=\"pure-checkbox pure-u-1-2 pure-u-sm-1-3\"\n                       style={chosen ? {} : {textDecoration: 'line-through'}}>{props.name}</label>\n                <button className=\"pure-u-1-12\" onClick={() => props.selfDestruct(props.id)}>x</button>\n            </div>\n\n        </>\n    );\n}\n\nexport default TodoElement;","import React, {useState} from 'react';\nimport TodoElement from \"./todoElement\";\nimport {nanoid} from 'nanoid'\n\nfunction Scrollable(props) {\n    const [todoList, setTodoList] = useState([\n        {key: 1, name: \"Learn programming\"},\n        {key: 2, name: \"Ăn phở\"},])\n\n    const [value, setValue] = useState(\"\")\n\n    const addTodo = (event) => {\n        event.preventDefault();\n        if (value != \"\") {\n            setTodoList(\n                [...todoList,\n                    {\n                        key: nanoid(),\n                        name: value\n                    }\n                ]\n            )\n            setValue(\"\")\n        }\n    }\n\n    const handleChange = (event) => {\n        setValue(event.target.value)\n    }\n\n    const handleDestroy = (id) => {\n        setTodoList(todoList.filter(element => element.key !== id))\n    }\n\n\n    return (\n        <>\n            <h1 style={{marginLeft: '2%'}}>Todo list</h1>\n            <form onSubmit={(event => addTodo(event))}>\n                <button style={{marginRight: '5px', marginLeft: '5px'}} type=\"submit\">Add</button>\n                <input className={\"pure-u-1-3 pure-u-lg-1-4\"} type=\"text\" value={value}\n                       onChange={(event) => handleChange(event)}/>\n            </form>\n            <br/>\n            {todoList.map(element => <TodoElement key={element.key} id={element.key} name={element.name}\n                                                  selfDestruct={handleDestroy}/>)}\n        </>\n    )\n}\n\n\nexport default Scrollable;","import React from 'react';\nimport TodoElement from \"./components/todoElement\";\nimport Scrollable from \"./components/Scrollable\";\n\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\" stylesheet={\"App.css\"}>\n                <Scrollable/>\n            </header>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}